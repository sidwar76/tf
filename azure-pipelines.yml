# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
 
pool:
  vmImage: 'ubuntu-latest'
 
variables:
  serviceConnectionName: anuj
  resourceGroup: siddharth_rg
  storageAccount: sidwar1 
  container: sid
  tfstateFile: terraform.tfstate
  anyTfChanges: false
 
steps:
 
- task: TerraformInstaller@0
  displayName: install Terraform v0.12.28
  inputs:
    terraformVersion: '0.12.28'
 
- task: TerraformTaskV1@0
  displayName: terraform init
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    backendServiceArm: '$(serviceConnectionName)'
    backendAzureRmResourceGroupName: '$(resourceGroup)'
    backendAzureRmStorageAccountName: '$(storageAccount)'
    backendAzureRmContainerName: '$(container)'
    backendAzureRmKey: '$(tfstateFile)'

- task: AzurePowerShell@5
  inputs:
    azureSubscription: 'anuj'
    ScriptType: 'InlineScript'
    Inline: 'terraform import azurerm_resource_group.siddharth_rg/subscriptions/0d3ce63c-abaa-48ae-bbe1-f582cea576b9/resourceGroups/siddharth_rg'
- task: TerraformTaskV1@0
  displayName: terraform plan -out=tfplan
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    commandOptions: '-out=tfplan'
    # commandOptions: '-detailed-exitcode -out=tfplan'
    environmentServiceNameAzureRM: '$(serviceConnectionName)'


 
- task: TerraformTaskV1@0
  displayName: terraform apply tfplan
  #condition: eq(variables.anyTfChanges, true)
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    commandOptions: 'tfplan'
    environmentServiceNameAzureRM: '$(serviceConnectionName)'